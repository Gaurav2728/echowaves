<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
   "http://www.w3.org/TR/html4/strict.dtd">

<html lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	<title> - <%= h @conversation.name %></title>
  <link rel="shortcut icon" href="/images/favicon.ico" />
 	
  <link rel="stylesheet" href="/stylesheets/screen.css" type="text/css" media="screen, projection">
  <link rel="stylesheet" href="/stylesheets/print.css" type="text/css" media="print"> 
  <!--[if IE]>
    <link rel="stylesheet" href="/stylesheets/ie.css" type="text/css" media="screen, projection">
  <![endif]-->
  <link rel="stylesheet" href="/stylesheets/style.css" type="text/css" media="screen, projection">
 	<%= stylesheet_link_tag 'default' %>
 	<%= javascript_include_tag :defaults %>
 	<%= javascript_include_tag "misc" %>
 	<%= javascript_include_tag "windowmanager" %>
 	<%= javascript_include_tag "messagemanipulation" %>
 	<%= javascript_include_tag "keyboard" %>


	<%= stylesheet_link_tag 'unitip' %>
	<%= javascript_include_tag 'unitip' %>
	
	<%if current_user%>
	
 	<%= orbited_javascript %> 		
 	<script>
 	function stomp_function() {
 		 var output = $('connection_stat_data');
 		// set up shell.
 		// set up stomp client.
 		stomp = new STOMPClient();
 		stomp.onopen = function() {
 			output.update('<span class="status_yellow">Transport opened</span>');
 		};
 		stomp.onclose = function(code) {
 			output.update('<span class="status_red">Transport closed (code: ' + code + ')</span>');
 			//try to reconnect
 			// stomp.connect(document.domain, 61613, 'UNIQUE_ID_PER_CLIENT', '');
			stomp.connect('<%=STOMP_HOST%>', <%=STOMP_PORT%>, '<%=current_user.id%>', '');
			setTimeout("stomp.subscribe('CONVERSATION_CHANNEL_<%=@conversation_id%>', {exchange:''})",5000);
	 		
	 		// setTimeout("stomp.subscribe('CONVERSATION_CHANNEL_<%=@conversation_id%>', {exchange:''})",5000);
 			// output.update(":polling messages");
 			// //lets poll for new messages in case there are some while we were disconnected
 			// new Ajax.Updater('messages', '/messages/message_poll?conversation_id=#{@conversation_id}', 
 			// 	{
 			// 		asynchronous:true, 
 			// 		evalScripts:true, 
 			// 		insertion:'bottom', 
 			// 		onComplete:function(request){MessageManipulation.handle_new_messages()}, 
 			// 		parameters:'after=' + MessageManipulation.last_message_number 
 			// 	}
 			// );
 			// output.update("bottom" : ":done polling messages");

 		};
 		stomp.onerror = function(error) {
 			alert("onerror: " + error);
 			output.update('<span class="status_red">onerror: ' + error + '</span>');
 		};
 		stomp.onerrorframe = function(frame) {
 			alert("onerrorframe: " + frame.body);
 			output.update('<span class="status_red">onerrorframe: ' + frame.body + '</span>');
 		};
 		stomp.onconnectedframe = function() {
	 		// stomp.subscribecribe('CONVERSATION_CHANNEL_<%=@conversation_id%>', {exchange:''});	
	 		stomp.subscribe('CONVERSATION_CHANNEL_<%=@conversation_id%>', {exchange:''});
			var i = 100;
			<%current_user.conversations.each do |conversation|%>
	 			setTimeout("stomp.subscribe('CONVERSATION_NOTIFY_CHANNEL_<%=conversation.id%>', {exchange:''});", i);
				i += 100;
			<%end%>
 			output.update('<span class="status_green">Connected</span>');
 		};
 		stomp.onmessageframe = function(frame) {
 			var message_output = $('messages');
 			// :update => 'messages', :position => 'bottom',
 			// eval(frame.body);
			// alert(frame.headers['destination']);

			// this is an actual message for current conversation
 			if(frame.headers['destination'].startsWith("CONVERSATION_CHANNEL_") ) {
 				message_output.insert({"top":frame.body});
 				MessageManipulation.handle_new_messages();
 				// $('message_message').value = '';
 				// Misc.focusInput('message_message');
 			}	
			// this is a notify conversation message
 			if(frame.headers['destination'].startsWith("CONVERSATION_NOTIFY_CHANNEL_") ) {
				
				// alert($(frame.headers['destination']));
				
			}

 		};
		stomp.connect('<%=STOMP_HOST%>', <%=STOMP_PORT%>, 'user_<%=current_user.id%>', '');
		//  		setTimeout("stomp.subscribe('CONVERSATION_CHANNEL_<%=@conversation_id%>', {exchange:''})",5000);
		// <%current_user.subscriptions.each do |subscription|%>
		//  			setTimeout("stomp.subscribe('CONVERSATION_NOTIFY_CHANNEL_<%=subscription.conversation_id%>', {exchange:''})",6000);		
		// <%end%>

 	};

  </script>
  <%end#if user is not logged in, no point in connecting to orbited%>
</head>

<body id="messages_layout" onLoad="MessageManipulation.handle_old_messages();MessageManipulation.handle_new_messages();Misc.focusInput('message_message');stomp_function();">

	<%= render(:partial => "shared/header") %>
	

	<div id="main_content" class="container">
    
		<div id="col1" class="span-14">
		  <%= flash_messages %>
		  <div class="item" id="messagesform" >
 		    <span class="strong">
				<%= link_to h(@conversation.name), conversation_messages_path(@conversation), :class => 'tip', :title => @conversation.escaped_description %>
			</span>
			  <%= render :partial => 'conversations/follow' %>
			  <div id="messageinputdiv">
		
		<%if current_user%>		
          <% remote_form_for(:message,
          	:update => 'messages', :position => 'top',
            :url => conversation_messages_path(@conversation),
            :complete => "$('message_message').value = '';$('message_attachment').value = '';$('message_message').style.height = '5em';$('message_message').focus();MessageManipulation.handle_new_messages();",
            # don't poll right now, and set the "after" value
            :before => 'MessageManipulation.working_begin();',
            :condition => "$('message_message').value.strip().length > 0") do |f| %>
        
            <p id="msgtextarea">        
            <%= f.text_area :message, :onkeyup => "if (this.scrollHeight > this.clientHeight &amp; !window.opera) this.style.height = (this.scrollHeight + 20) + 'px';", :class => 'messageinput' %>  
            </p>
        
            <p id="msgcontrols">
            <%= submit_tag t("ui.send") %> <span class="mute"><%= t("ui.ctrl_enter") %></span>
        
            <span id="working" style="display:none">Working...</span>
            <%= link_to_function t("ui.attach_file"), :id => 'attachment_link' do |page|
              page[:attachment_form].show
              page[:attachment_link].hide
            end %>
            </p>
          <% end %>
		<%end#if current_user%>
        </div>
        
        <div id="attachment_form" style="display:none">
      	  <%#this form is purely for attachments handling%>
      	  <% form_for(:message, 
      	  	:url  => { :action => "upload_attachment" },
      	    :html => { :multipart => true, :target => "upload_frame" } ) do |f| %>
      	      <%= f.file_field :attachment %>
      	  	  <input type="hidden" name="conversation_id" id="conversation_id" value="<%= @conversation_id %>" />
      	  	  <%= submit_tag t("ui.attach") %>
      	  	  <%= link_to_function "hide" do |page|
                page[:attachment_form].hide
                page[:attachment_link].show
              end %>
      	  <% end %>
      	  
      	  <iframe id='upload_frame' name="upload_frame" style="width:0px;height:0px;border:0px" src="about:blank"></iframe>
        </div>
      </div>
      <div id="last_message_avise"><span class="small"><%= t("ui.this_is_the_newest_message") %></span></div>
  		<%= yield  %>
		</div>
		
		<div id="col2" class="span-6">
		  <%= render :partial => 'users/recently_visited' %>
		  <%= render :partial => 'users/news' %>
		  <%= render :partial => 'users/my_conversations' %>
		</div>
		
		<div id="col3" class="span-4 last">
      <%= render :partial => 'shared/user_stat' %>
    	<%= render :partial => 'conversations/users_in_conversation' %>
    </div>
   
	</div>

	<%= render(:partial => "shared/footer") %>

<%#for now lets poll for new messages in conversations that are off the screen%>  
<%= periodically_call_remote :url => {:controller => 'users', :action => 'update_news'}, 
	:frequency => 60 %> 

</body>
</html>