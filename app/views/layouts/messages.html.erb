<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
   "http://www.w3.org/TR/html4/strict.dtd">

<html lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	<title> - <%= h @conversation.name %></title>
  <link rel="shortcut icon" href="/images/favicon.ico" />
 	
  <!-- Framework CSS -->
	<link rel="stylesheet" href="/stylesheets/blueprint/screen.css" type="text/css" media="screen, projection">
	<link rel="stylesheet" href="/stylesheets/blueprint/print.css" type="text/css" media="print">
  <!--[if IE]><link rel="stylesheet" href="/stylesheets/blueprint/ie.css" type="text/css" media="screen, projection"><![endif]-->
	
	<!-- Import fancy-type plugin for the sample page. -->
	<link rel="stylesheet" href="/stylesheets/blueprint/plugins/fancy-type/screen.css" type="text/css" media="screen, projection">
 	<%= stylesheet_link_tag 'custom' %>
 	<%= javascript_include_tag :defaults %>
 	<%= javascript_include_tag "misc" %>
 	<%= javascript_include_tag "windowmanager" %>
 	<%= javascript_include_tag "messagemanipulation" %>
 	<%= javascript_include_tag "keyboard" %>

 	<%= orbited_javascript %> 		
 	<script>
 	function stomp_function() {
 		 var output = $('connection_stat_data');
 		// set up shell.
 		// set up stomp client.
 		stomp = new STOMPClient();
 		stomp.onopen = function() {
 			output.update("Transport opened");
 			// setTimeout("subscribe('CONVERSATION_CHANNEL_<%=@conversation_id%>', {exchange:''})",5000);						
 		};
 		stomp.onclose = function(code) {
 			output.update("Transport closed (code: " + code + ")");
 			//try to reconnect
 			// stomp.connect(document.domain, 61613, 'UNIQUE_ID_PER_CLIENT', '');			
 			setTimeout("stomp.connect('<%=STOMP_HOST%>', <%=STOMP_PORT%>, 'UNIQUE_ID_PER_CLIENT', '');", 5000);
 			setTimeout("stomp.subscribe('CONVERSATION_CHANNEL_<%=@conversation_id%>', {exchange:''})",10000);
 			// output.update(":polling messages");
 			// //lets poll for new messages in case there are some while we were disconnected
 			// new Ajax.Updater('messages', '/messages/message_poll?conversation_id=#{@conversation_id}', 
 			// 	{
 			// 		asynchronous:true, 
 			// 		evalScripts:true, 
 			// 		insertion:'bottom', 
 			// 		onComplete:function(request){MessageManipulation.handle_new_messages()}, 
 			// 		parameters:'after=' + MessageManipulation.last_message_number 
 			// 	}
 			// );
 			// output.update("bottom" : ":done polling messages");

 		};
 		stomp.onerror = function(error) {
 			alert("onerror: " + error);
 			output.update("onerror: " + error);
 		};
 		stomp.onerrorframe = function(frame) {
 			alert("onerrorframe: " + frame.body);
 			output.update("onerrorframe: " + frame.body);
 		};
 		stomp.onconnectedframe = function() {
 			output.update("Connected");
 		};
 		stomp.onmessageframe = function(frame) {
 			var message_output = $('messages');
 			// :update => 'messages', :position => 'bottom',
 			// eval(frame.body);
 			if(frame.body.startsWith("<!--message-->") ) {
 				message_output.insert({"bottom":frame.body});
 				MessageManipulation.handle_new_messages();
 				// $('message_message').value = '';
 				// Misc.focusInput('message_message');
 			}	
 			if(frame.body.startsWith("<!--user-->")) {
 				alert('new user');
 			}
 			if(frame.body.startsWith("<!--conversation-->")) {
 				alert('conversation updated');
 			}

 		};
 		stomp.connect('<%=STOMP_HOST%>', <%=STOMP_PORT%>, 'UNIQUE_ID_PER_CLIENT', '');
 		setTimeout("stomp.subscribe('CONVERSATION_CHANNEL_<%=@conversation_id%>', {exchange:''})",5000);
 		// stomp.subscribe('CONVERSATION_CHANNEL_<%=@conversation_id%>', {exchange:''});
 	};

  </script>
</head>

<body onLoad="Misc.pageScroll();MessageManipulation.handle_old_messages();MessageManipulation.handle_new_messages();Misc.focusInput('message_message');stomp_function();">

	<%= render(:partial => "shared/header") %>
	
	<div id="menu">
	  <div id="menu_padding" class="container">
		  <ul>
  	  	<li><%= link_to t('ui.home'), home_path %></li>
  	  	<li><%= link_to t('ui.users'), users_path %></li>
  	  	<li class="active"><%= link_to t('ui.conversations'), conversations_path %></li>
  	  	<li class="current_conversation">current: <%= h @conversation.name %><%= render :partial => 'conversations/follow' %></li>
  	  </ul>
  	  <div id="connection_stat"><div id="connection_stat_data"></div></div>
  	</div>
	</div>

	<div id="main_content" class="container">
    
		<div class="span-15 colborder">
		  <%= flash_messages %>
  		<%= yield  %>
		</div>
		
		<div class="span-8 last" id="sidebar"><div id="sidebar_padding">
		  <%= render :partial => 'conversations/users_in_conversation' %>
		  <%= render :partial => 'users/my_conversations' %>
		</div></div>
		
   
	</div>

  <div id="messageinputdiv">
    <div id="messageinputdivpadding" class="container">
      <div class="span-15 colborder">
    	  <% remote_form_for(:message,
    	  	:update => 'messages', :position => 'bottom',
    	    :url => conversation_messages_path(@conversation),
    	    :complete => "$('message_message').value = '';$('message_attachment').value = '';$('message_message').style.height = '5em';$('message_message').focus();MessageManipulation.handle_new_messages()",
    	    # don't poll right now, and set the "after" value
    	    :before => 'MessageManipulation.working_begin();MessageManipulation.suspend_polling = true;$("after").value = MessageManipulation.last_message_number;',
    	    :condition => "$('message_message').value.strip().length > 0") do |f| %>
        
        
    	    <%= f.text_area :message, :onkeyup => "if (this.scrollHeight > this.clientHeight &amp; !window.opera) this.style.height = (this.scrollHeight + 20) + 'px';", :class => 'messageinput' %>  
    	    <input type="hidden" name="after" id="after" value="0" />
        
    	    <%= submit_tag "Send" %> <span class="mute">(ctrl+Enter to submit message)</span>
        
    	    <%= link_to_remote "refresh", :url => { :action => 'message_poll', :conversation_id => @conversation },
    	      :update => 'messages', :position => 'bottom',
    	      :complete => "MessageManipulation.handle_new_messages()",
    	      :with => "'after=' + MessageManipulation.last_message_number",
    	      :before => 'MessageManipulation.working_begin();MessageManipulation.suspend_polling = true',
    	      :frequency => REFRESH_FREQUINCY %>
        
    	    <span id="working" style="display:none">Working...</span>
    	  <% end %>
      </div>
      <div class="span-8 last">
    	  <%#this form is purely for attachments handling%>
    	  <% form_for(:message, 
    	  	:url  => { :action => "upload_attachment" },
    	    :html => { :multipart => true, :target => "upload_frame" } ) do |f| %>
    	      <%= f.file_field :attachment %>
    	  	  <input type="hidden" name="after" id="attach_after" value="0" />
    	  	  <input type="hidden" name="conversation_id" id="conversation_id" value="<%= @conversation_id %>" />
    	  	  <%=submit_tag "Attach", :onclick => "$('attach_after').value = MessageManipulation.last_message_number"%> 
    	  <% end %>
    	  <iframe id='upload_frame' name="upload_frame" style="width:0px;height:0px;border:0px" src="about:blank"></iframe>
      </div>
    </div>
  	
  </div>
  

</body>
</html>